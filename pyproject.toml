[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "artigraph"
dynamic = ["version"]
description = "A library for interrelated graphs of artifacts and the runs that produce them."
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = []
authors = [{ name = "U.N. Owen", email = "void@some.where" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ["typing_extensions", "sqlalchemy>=2,<3", "anyio>=3,<4"]

[project.optional-dependencies]
aws = ["boto3>=1,<2"]
pandas = ["pandas>=2,<3", "pyarrow>=12,<13"]
numpy = ["numpy>=1,<2", "pandas>=2,<3", "pyarrow>=12,<13"]
polars = ["polars<1", "pyarrow>=12,<13"]

[project.urls]
Documentation = "https://github.com/unknown/artigraph#readme"
Issues = "https://github.com/unknown/artigraph/issues"
Source = "https://github.com/unknown/artigraph"

# --- Hatch ----------------------------------------------------------------------------------------

[tool.hatch.version]
path = "src/artigraph/__init__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest>=7",
  "pytest-asyncio",
  "black>=23.1.0",
  "pyright>=1",
  "ruff>=0.0.243",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
format = ["black {args:.}", "ruff --fix {args:.}", "style"]
lint = ["style", "typing"]

test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

lint-typing = "pyright {args:src}"
lint-style = ["ruff {args:.}", "black --check --diff {args:.}"]

# --- Black ----------------------------------------------------------------------------------------

[tool.black]
target-version = ["py37"]
line-length = 100
skip-string-normalization = true

# --- Ruff -----------------------------------------------------------------------------------------

[tool.ruff]
target-version = "py37"
line-length = 100
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["artigraph"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

# --- Coverage -------------------------------------------------------------------------------------

[tool.coverage.run]
source_pkgs = ["artigraph", "tests"]
branch = true
parallel = true

[tool.coverage.paths]
artigraph = ["src/artigraph"]

[tool.coverage.report]
fail_under = 100
show_missing = true
skip_covered = true
sort = "Name"
exclude_lines = [
  "no ?cov",
  '\.\.\.',
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]


# --- PyRight -----------------------------------------------------------------------------------------

[tool.pyright]
include = ["src", "tests"]
